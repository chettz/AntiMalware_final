#pragma once

#include <filesystem>
#include <thread>
#include <chrono>
#include <mutex>
#include <semaphore>
#include "typedef.h"
#include "logger.h"
#include "strconv.h"

namespace watcher
{
	using namespace logging;
	using namespace strconv;
	using namespace std::filesystem;

	// 감시 이벤트 타입 정의
	enum EventType
	{
		FILE_EVENT = 0x0,
		PROCESS_EVENT,
		REG_EVENT
	};

	// 감시 이벤트 서브 타입 정의
	enum EventSubType
	{
		EVENT_UNKNOWN = 0x0,
		FILE_EVENT_CREATED = FILE_ACTION_ADDED,
		FILE_EVENT_REMOVED = FILE_ACTION_REMOVED,
		FILE_EVENT_MODIFIED = FILE_ACTION_MODIFIED,
		FILE_EVENT_RENAMED_OLD = FILE_ACTION_RENAMED_OLD_NAME,
		FILE_EVENT_RENAMED_NEW = FILE_ACTION_RENAMED_NEW_NAME,
		PROCESS_EVENT_CREATED = 0x1000,
		REG_EVENT_CREATED = 0x2000
	};

	// 레지스트리 루트 키 정의
	enum RegRootKey
	{
		REG_HKEY_NONE = 0,
		REG_HKEY_CLASSES_ROOT = reinterpret_cast<size_t>(HKEY_CLASSES_ROOT),
		REG_HKEY_LOCAL_MACHINE = reinterpret_cast<size_t>(HKEY_LOCAL_MACHINE),
		REG_HKEY_CURRENT_USER = reinterpret_cast<size_t>(HKEY_CURRENT_USER),
		REG_HKEY_USERS = reinterpret_cast<size_t>(HKEY_USERS),
	};

	// 감시 이벤트 정보 구조체 형식 정의
	typedef struct
	{
		EventType eventType;
		EventSubType eventSubType;
		size_t eventValue;
		tstring Path;
		tstring Name;
		tstring Other;
	}
	EVENT_INFO;

	// 감시 이벤트 정보 구조체 목록 저장을 위한 큐 형식 정의
	typedef std::queue<EVENT_INFO> EventInfoList;

	class Watcher
	{
	protected:
		Logger logger_;
		StrConv strConv_;
		bool isAlive_;
		bool watchingFlag_;
		mutex eventInfoLock_;
		HANDLE getNextInfoEvent_;
		EventInfoList eventInfoList_;

	protected:
		virtual void watchThreadFunc(void) abstract;

	public:
		Watcher();
		virtual ~Watcher();
		virtual bool isAlive(void) const;
		virtual bool startMonitoring(void);
		virtual void stopMonitoring(void);
		virtual void eventCallback(const EVENT_INFO& eventInfo);
		virtual bool getNextInfo(EVENT_INFO& eventInfo);
	};

}