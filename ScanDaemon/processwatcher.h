#pragma once

#include "watcher.h"
#include <comdef.h>
#include <Wbemidl.h>

namespace watcher
{
    class ProcessWatcher : public Watcher
    {
    private:
        void watchThreadFunc(void) override;

    public:
        ProcessWatcher() = default;
        ~ProcessWatcher() = default;
    };

    class EventSink : public IWbemObjectSink
    {
    private:
        ProcessWatcher* callbackClassPtr_;

    public:
        ULONG STDMETHODCALLTYPE AddRef() { return 1; };
        ULONG STDMETHODCALLTYPE Release() { return 1; };
        HRESULT STDMETHODCALLTYPE SetStatus(LONG lFlags, HRESULT hResult, BSTR strParam, IWbemClassObject* pObjParam) { return WBEM_S_NO_ERROR; };
        HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void** ppv);
        HRESULT STDMETHODCALLTYPE Indicate(LONG lObjectCount, IWbemClassObject** apObjArray);
        void setCallbackClass(ProcessWatcher* callbackClassPtr);
    };
};
