#pragma once

#include "typedef.h"
#include "logger.h"
#include <functional>
#include <filesystem>
#include <thread>
#include <chrono>

using namespace logging;
using namespace std::filesystem;

namespace fileutil 
{
    class FileUtil 
    {
    private:
        Logger logger_;
        bool searchContinue_; 
        bool isSearchAlive_;

    private:
        bool extractString(const tstring& orgPath, const tstring& startMarker, const tstring& endMarker, tstring& subString);

    public:
        FileUtil() : searchContinue_(false), isSearchAlive_(false) {};
        ~FileUtil() = default;
        const tstring getCurrentPath(void);
        bool getRealPath(const tstring& orgPath, tstring& realPath);
        bool removeFile(const tstring& filePath, bool& needReboot);
        void stopSearchFiles(void);
        void startSearchFiles(const tstring& parentDirectory, size_t& currentFileCount, function<void(tstring)> scanCallback);
        void searchFiles(const tstring& parentDirectory, size_t& currentFileCount, function<void(tstring)> scanCallback);
    };
};
