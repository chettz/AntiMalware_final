#pragma once

#include "logger.h"

namespace ipc
{
	using namespace std;
	using namespace logging;

	// IPC 객체 생성 및 오픈에 필요한 이름 정의
	// 다른 세션과의 통신을 위해서는 "Global\\" 접두어가 필요
	// 이 경우 관리자 권한 실행 및 권한 설정 필요
	#define IPC_MUTEX_NAME			_T("AICS_Mutex")
	#define IPC_SERVER_EVENT_NAME	_T("AICS_SeverEvent")
	#define IPC_CLIENT_EVENT_NAME	_T("AICS_ClientEvent")
	#define IPC_SHARED_MEMORY_NAME	_T("AICS_SharedMemory")
	#define IPC_MEMORY_BUFFER_SIZE	8192
	
	// 프로세스간 통신을 위한 명령 타입 정의
	enum IPCCommandType
	{
		IPC_SCAN_NONE = 0x0,
		IPC_SCAN_FILE = 0x1,
		IPC_SCAN_PROCESS = 0x2,
		IPC_SCAN_HASH = 0x4,
		IPC_SCAN_RESULT_DETECT = 0x8,
		IPC_SCAN_RESULT_NOT_DETECT = 0x10,
		IPC_SCAN_UNKNOWN = 0xff
	};

	// 프로세스간 통신을 위한 헤더 타입 정의
	typedef struct
	{
		DWORD ipcCommand;
		DWORD ipcDataSize;
	}
	IPC_MESSAGE_HEADER, * PIPC_MESSAGE_HEADER;

	// 프로세스간 통신을 위한 데이터 타입 정의
	typedef struct
	{
		IPC_MESSAGE_HEADER ipcHeader;
		BinaryData ipcData;
	}
	IPC_MESSAGE, * PIPC_MESSAGE;

	class IPC 
	{
	private:
		Logger logger_;
		bool isOpened_;
		bool isServer_;
		SECURITY_DESCRIPTOR securityDescriptor_;
		SECURITY_ATTRIBUTES securityAttributes_;
		HANDLE mutexHandle_;
		HANDLE serverEventHandle_;
		HANDLE clientEventHandle_;
		HANDLE sharedMemHandle_;
		PBYTE sharedMemBuffer_;
		DWORD sharedMemSize_;

	private:
		bool initializeFileMapping(const bool& create, const DWORD& bufferSize = IPC_MEMORY_BUFFER_SIZE);
		bool initializeMutex(const bool& create);
		bool initializeEvent(const bool& create);

	public:
		IPC();
		~IPC();
		bool isOpen(void) const;
		bool sendMsg(const IPC_MESSAGE& ipcMessage);
		bool receiveMsg(IPC_MESSAGE& ipcMessage, IPCCommandType acceptCommandType);
		bool open(const bool& create, const DWORD& bufferSize = IPC_MEMORY_BUFFER_SIZE);
		void close(void);
		bool getNextInfo(IPC_MESSAGE& ipcData, IPCCommandType acceptCommandType);
	};
};

