#pragma once

#include "typedef.h"
#include "hash.h"
#include "logger.h"
#include "strconv.h"
#include "peparser.h"
#include <fstream>
#include <filesystem>

namespace scanengine
{
	#define BYTE_COUNT_DWORD 4
	#define BYTE_COUNT_24BIT 3
	#define BLOOM_FILTER_HASH_FUNCTION_COUNT 6
	#define DB_FILE_COUNT 3
	#define DB_FILE_NAME_INDEX 0
	#define DB_FILE_FILTER_INDEX 1
	#define DB_FILE_HASH_INDEX 2
	#define DB_FILE_NAME _T("acis")
	#define DB_FILE_EXT_NAME _T(".nam")
	#define DB_FILE_EXT_FILTER _T(".blf")
	#define DB_FILE_EXT_HASH _T(".has")
	#define HASH_TABLE_BUCKET_SIZE 262144 // 16bit = 65536, 항목 당 4byte = 65536 * 4 = 262144 byte, 256kb

	using namespace hash;
	using namespace logging;
	using namespace strconv;
	using namespace peparser;
	using namespace std::filesystem;

	// BYTE에서 Bit flag(0~7번째 bit) 설정 및 확인을 위한 상수 값
	const BYTE BIT_FLAG[8] = { 1 << 0, 1 << 1, 1 << 2, 1 << 3, 1 << 4, 1 << 5, 1 << 6, 1 << 7 };

	// 파일 해시 탐지 패턴 정보를 저장하기 위한 형식 정의 
	// 탐지명, 해시값
	typedef struct _DetectHashInfo
	{
		u8string DetectName;
		BinaryData DetectHash;
	}
	DetectHashInfo;
	typedef vector<DetectHashInfo> DetectHashInfoList;

	// 탐지명 정보를 저장하기 위한 형식 정의 
	// 탐지명, 탐지명 파일에서의 offset
	typedef map<u8string, DWORD> DetectNameInfoMap;

	// 파일 매핑 정보를 저장하기 위한 타입 정의
	typedef struct _FILE_MAPPING_INFO
	{
		HANDLE fileHandle;
		HANDLE fileMappingHandle;
		PBYTE baseAddress;
	}
	FILE_MAPPING_INFO, * PFILE_MAPPING_INFO;

	// 해시 테이블의 Linked list 각 항목 데이터 타입 정의
	typedef struct _LINKED_LIST_ITEM
	{
		BYTE hash[16];
		DWORD detectNameOffset;
		DWORD nextIndex;
	}
	LINKED_LIST_ITEM, * PLINKED_LIST_ITEM;

	class ScanEngine
	{
	private:
		Logger logger_;
		StrConv strConv_;
		FILE_MAPPING_INFO fileMappingInfo_[DB_FILE_COUNT];
		bool initialized_;

	private:
		void close(void);
		bool createFileMappingInfo(const tstring& filePath, FILE_MAPPING_INFO& fileMappingInfo);
		bool getDetectName(const DWORD& nameOffset, tstring& detectName);
		bool checkFilter(const BinaryData& hashData, WORD& crcHash);
		bool checkHashTable(const BinaryData& hashData, const WORD& crcHash, tstring& detectName);

	public:
		ScanEngine() : fileMappingInfo_ { { INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE, nullptr }, }, initialized_(false) {};
		~ScanEngine();
		bool initialize(const tstring& dbDirPath = _T(""));
		bool scanHash(const BinaryData& hashData, tstring& detectName);
		bool scanHash(const tstring& hashString, tstring& detectName);
		bool scanFile(const tstring& filePath, tstring& detectName);
		bool scanProcess(const DWORD& pid, tstring& detectName);
	};
}

