#pragma once

#include "typedef.h"
#include "logger.h"
#include "strconv.h"
#include "hash.h"

namespace dbfile 
{
	#define MD5_LENGTH 16
	#define BYTE_COUNT_DWORD 4
	#define BYTE_COUNT_24BIT 3
	#define BLOOM_FILTER_SIZE 2097152 // 24bit = 16,777,216 bit = 2,097,152 byte, 2MB 
	#define BLOOM_FILTER_HASH_FUNCTION_COUNT 4
	#define HASH_TABLE_BUCKET_SIZE 262144 // 16bit = 65536, 항목 당 4byte = 65536 * 4 = 262144 byte, 256kb
	#define IPC_NAME _T("AICS_IPC")
	#define DB_FILE_NAME _T("acis")
	#define DB_FILE_EXT_FILTER _T(".blf")
	#define DB_FILE_EXT_HASH _T(".has")
	#define DB_FILE_EXT_NAME _T(".nam")

	using namespace std;
	using namespace logging;
	using namespace strconv;
	using namespace hash;

	// 파일 해시 탐지 패턴 정보를 저장하기 위한 형식 정의 
	// 탐지명, 해시값
	typedef struct _DetectHashInfo
	{
		std::u8string DetectName;
		BinaryData DetectHash;
	}
	DetectHashInfo;
	typedef std::vector<DetectHashInfo> DetectHashInfoList;

	// 탐지명 정보를 저장하기 위한 형식 정의 
	// 탐지명, 탐지명 파일에서의 offset
	typedef std::map<std::u8string, DWORD> DetectNameInfoMap;

	// BYTE에서 Bit flag(0~7번째 bit) 설정 및 확인을 위한 상수 값
	const BYTE BIT_FLAG[8] = { 1 << 0, 1 << 1, 1 << 2, 1 << 3, 1 << 4, 1 << 5, 1 << 6, 1 << 7 };

	// UTF-8 문자열을 처리하기 위한 File Input Stream u8ifstream 정의
	using u8ifstream = std::basic_ifstream<char8_t, std::char_traits<char8_t>>;

	// 파일 해시에서 뽑은 CRC16 해시 값을 저장하기 위한 형식 정의
	typedef vector<WORD> DetectCrc16List;

	// 해시 테이블의 Linked list 각 항목 데이터 타입 정의
	typedef struct _LINKED_LIST_ITEM
	{
		BYTE hash[16];
		DWORD detectNameOffset;
		DWORD nextIndex;
	}
	LINKED_LIST_ITEM, * PLINKED_LIST_ITEM;

	class DBFile
	{
	private:
		Logger logger_;
		StrConv strConv_;
		Hash hash_;
		const size_t bloomFilterSize_;		// 24bit = 16,777,216 bit = 2,097,152 byte, 2MB 
		tstring malwareDBFileName_;			// DB 파일 이름
		const tstring malwareNameExt_;		// 악성코드 이름 파일 확장자
		const tstring malwareFilterExt_;	// 블룸 필터 파일 확장자
		const tstring malwareHashExt_;		// 탐지 해시 파일 확장자

	private:
		void setBit(BinaryData& bloomFilter, const DWORD bitIndex);
		bool getDetectHashInfo(const tstring& csvFilePath, DetectHashInfoList& detectHashInfoList);
		bool saveDataToFile(const tstring& saveFilePath, const BinaryData& binaryData) const;
		bool makeBloomFilterDB(const tstring& dirPath, const DetectHashInfoList& detectHashInoList, DetectCrc16List& crc16List);
		bool makeHashDB(const tstring& dirPath, const DetectHashInfoList& detectHashInoList, const DetectCrc16List& crc16List, const DetectNameInfoMap& detectNameInfoMap);
		bool makeNameDB(const tstring& dirPath, const DetectHashInfoList& detectHashInoList, DetectNameInfoMap& detectNameInfoMap);

	public:
		DBFile() : bloomFilterSize_(BLOOM_FILTER_SIZE), malwareDBFileName_(DB_FILE_NAME), malwareNameExt_(DB_FILE_EXT_NAME), malwareFilterExt_(DB_FILE_EXT_FILTER), malwareHashExt_(DB_FILE_EXT_HASH) {};
		~DBFile() = default;
		void setDBFileName(const tstring_view& dbFileName);
		bool makeDBFile(const tstring& csvFilePath, const tstring& dbDirPath);

	};
}

